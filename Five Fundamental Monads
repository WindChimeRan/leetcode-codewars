-- https://www.codewars.com/kata/five-fundamental-monads/train/haskell
{-# LANGUAGE NoImplicitPrelude #-}
module Monads where

import Prelude hiding (Monad, Identity, Maybe(..), State, Reader, Writer)
import Data.Monoid

class Monad m where
  return :: a -> m a
  (>>=) :: m a -> (a -> m b) -> m b

data Identity a = Identity a
  deriving (Show, Eq)

data Maybe a = Nothing | Just a
  deriving (Show, Eq)

data State s a = State {runState :: s -> (a, s)}

data Reader s a = Reader {runReader :: s -> a }

data Writer w a = Writer {runWriter :: (w, a)}

instance Monad Identity where
  return a = Identity a
  (Identity v) >>= f = f v

instance Monad Maybe where
  return = Just
  Nothing >>= f = Nothing
  (Just v) >>= f = f v

instance Monad (State s) where
  return a = State $ \s -> (a, s)
  (State g) >>= f = State $ \s -> let (a, new)  = g s
                                      (State n) = f a
                                  in (n new)

instance Monad (Reader s) where
  return s = Reader $ \x -> s
  (Reader g) >>= f = Reader $ \x -> runReader (f . g $ x) x
  
instance Monoid w => Monad (Writer w) where
  return w = Writer (mempty, w)
  (Writer (s, v)) >>= f = let (new_s, new_v) = runWriter . f $ v
                          in Writer (s `mappend` new_s, new_v)
